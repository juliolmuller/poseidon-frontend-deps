{
  "version": 3,
  "sources": ["../../@hookform/resolvers/src/validateFieldsNatively.ts", "../../@hookform/resolvers/src/toNestError.ts", "../../@hookform/resolvers/yup/src/yup.ts"],
  "sourcesContent": ["import {\n  get, FieldError, ResolverOptions, Ref\n} from 'react-hook-form';\n\nconst setCustomValidity = (ref: Ref, fieldPath: string, errors: Record<string, FieldError>) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues>(\n  errors: Record<string, FieldError>,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n\n\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors)\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) => setCustomValidity(ref, fieldPath, errors))\n    }\n  }\n};\n", "import {\n  set,\n  get,\n  FieldError,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestError = <TFieldValues>(\n  errors: Record<string, FieldError>,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n\n    set(\n      fieldErrors,\n      path,\n      Object.assign(errors[path], { ref: field && field.ref }),\n    );\n  }\n\n  return fieldErrors;\n};\n", "import Yup from 'yup';\nimport { toNestError, validateFieldsNatively } from '@hookform/resolvers';\nimport { appendErrors, FieldError } from 'react-hook-form';\nimport { Resolver } from './types';\n\n/**\n * Why `path!` ? because it could be `undefined` in some case\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) => {\n  return (error.inner || []).reduce<Record<string, FieldError>>(\n    (previous, error) => {\n      if (!previous[error.path!]) {\n        previous[error.path!] = { message: error.message, type: error.type! };\n      }\n\n      if (validateAllFieldCriteria) {\n        const types = previous[error.path!].types;\n        const messages = types && types[error.type!];\n\n        previous[error.path!] = appendErrors(\n          error.path!,\n          validateAllFieldCriteria,\n          previous,\n          error.type!,\n          messages\n            ? ([] as string[]).concat(messages as string[], error.message)\n            : error.message,\n        ) as FieldError;\n      }\n\n      return previous;\n    },\n    {},\n  );\n};\n\nexport const yupResolver: Resolver =\n  (schema, schemaOptions = {}, resolverOptions = {}) =>\n  async (values, context, options) => {\n    try {\n      if (schemaOptions.context && process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n        );\n      }\n\n      const result = await schema[\n        resolverOptions.mode === 'sync' ? 'validateSync' : 'validate'\n      ](\n        values,\n        Object.assign({ abortEarly: false }, schemaOptions, { context }),\n      );\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        values: result,\n        errors: {},\n      };\n    } catch (e: any) {\n      if (!e.inner) {\n        throw e;\n      }\n\n      return {\n        values: {},\n        errors: toNestError(\n          parseErrorSchema(\n            e,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n  };\n"],
  "mappings": ";;;;;;;;;AAIA,IAAM,IAAoB,SAAC,GAAU,IAAmB,IAAA;AACtD,MAAI,KAAO,oBAAoB,GAAK;AAClC,QAAM,KAAQ,IAAI,IAAQ,EAAA;AAC1B,MAAI,kBAAmB,MAAS,GAAM,WAAY,EAAA,GAElD,EAAI,eAAA;EAAA;AAAA;AALR,IAUa,IAAyB,SACpC,GACA,GAAA;AAAA,MAAA,KAAA,SAIW,IAAA;AACT,QAAM,KAAQ,EAAQ,OAAO;AACzB,UAAS,GAAM,OAAO,oBAAoB,GAAM,MAClD,EAAkB,GAAM,KAAK,IAAW,CAAA,IAC/B,GAAM,QACf,GAAM,KAAK,QAAQ,SAAC,IAAA;AAAA,aAA0B,EAAkB,IAAK,IAAW,CAAA;IAAA,CAAA;EAAA;AALpF,WAAW,MAAa,EAAQ;AAAA,OAArB,EAAA;AAAA;AAhBb,ICMa,IAAc,SACzB,IACA,IAAA;AAEA,KAAQ,6BAA6B,EAAuB,IAAQ,EAAA;AAEpE,MAAM,KAAc,CAAA;AACpB,WAAW,KAAQ,IAAQ;AACzB,QAAM,IAAQ,IAAI,GAAQ,QAAQ,CAAA;AAElC,QACE,IACA,GACA,OAAO,OAAO,GAAO,IAAO,EAAE,KAAK,KAAS,EAAM,IAAA,CAAA,CAAA;EAAA;AAItD,SAAO;AAAA;;;AClBT,IA+Ba,IACX,SAAC,IAAQ,GAAoB,GAAA;AAAA,SAAA,AAApB,MAAoB,UAApB,KAAgB,CAAA,IAAA,AAAI,MAAJ,UAAI,KAAkB,CAAA,IAAA,SACxC,GAAQ,GAAS,GAAA;AAAA,QAAA;AAAA,aAAA,QAAA,QAAA,SAAA,IAAA,GAAA;AAAA,YAAA;AAAA,cAAA,IAEhB,GAAc,WAAoC,QAEpD,QAAQ,KACN,+FAAA,GAAA,QAAA,QAIiB,GACM,AAAzB,EAAgB,SAAS,SAAS,iBAAiB,YAEnD,GACA,OAAO,OAAO,EAAE,YAAA,MAAY,GAAS,GAAe,EAAE,SAAA,EAAA,CAAA,CAAA,CAAA,EAAA,KAAA,SAJlD,IAAA;AASN,mBAFA,EAAQ,6BAA6B,EAAuB,CAAA,GAAI,CAAA,GAEzD,EACL,QAAQ,IACR,QAAQ,CAAA,EAAA;UAAA,CAAA;QAAA,SAAA,IAAA;AAAA,iBAAA,EAAA,EAAA;QAAA;AAAA,eAAA,KAAA,EAAA,OAAA,EAAA,KAAA,QAAA,CAAA,IAAA;MAAA,EAAA,GAAA,SAEH,IAAA;AACP,YAAA,CAAK,GAAE;AACL,gBAAM;AAGR,eAAO,EACL,QAAQ,CAAA,GACR,QAAQ,EA7Dd,MA+DU,IA9DV,KAAA,CA+DW,EAAQ,6BACkB,AAAzB,EAAQ,iBAAiB,OA9D7B,IAAM,SAAS,CAAA,GAAI,OACzB,SAAC,IAAU,IAAA;AAKT,cAJK,GAAS,GAAM,SAClB,IAAS,GAAM,QAAS,EAAE,SAAS,GAAM,SAAS,MAAM,GAAM,KAAA,IAG5D,IAA0B;AAC5B,gBAAM,KAAQ,GAAS,GAAM,MAAO,OAC9B,KAAW,MAAS,GAAM,GAAM;AAEtC,eAAS,GAAM,QAAS,aACtB,GAAM,MACN,IACA,IACA,GAAM,MACN,KACK,CAAA,EAAgB,OAAO,IAAsB,GAAM,OAAA,IACpD,GAAM,OAAA;UAAA;AAId,iBAAO;QAAA,GAET,CAAA,CAAA,IAyCM,CAAA,EAAA;AApEe,YACvB,IACA;MAAA,CAAA,CAAA;IAAA,SA8BA,IAAA;AAAA,aAAA,QAAA,OAAA,EAAA;IAAA;EAAA;AAAA;",
  "names": []
}
